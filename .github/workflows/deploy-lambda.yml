name: Deploy Lambda Function

on:
  push:
    branches:
      - main
      - develop
    paths:
      - 'src/**'
      - 'pom.xml'
      - '.github/workflows/deploy-lambda.yml'
  pull_request:
    branches:
      - main
      - develop
    paths:
      - 'src/**'
      - 'pom.xml'
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy'
        required: true
        type: choice
        options:
          - dev
          - staging
          - prod
        default: dev

env:
  JAVA_VERSION: '17'
  MAVEN_OPTS: '-Xmx1024m'

jobs:
  build:
    name: Build Application
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: ${{ env.JAVA_VERSION }}
          distribution: 'temurin'
          cache: maven

      - name: Build with Maven
        run: mvn clean package -DskipTests

      - name: Run tests
        run: mvn test

      - name: Upload JAR artifact
        uses: actions/upload-artifact@v4
        with:
          name: application-jar
          path: target/ehr-spring-core-1.0.0.jar
          retention-days: 5

  deploy-dev:
    name: Deploy to Development
    runs-on: ubuntu-latest
    needs: build
    if: |
      (github.event_name == 'push' && github.ref == 'refs/heads/develop') ||
      (github.event_name == 'workflow_dispatch' && github.event.inputs.environment == 'dev')
    environment:
      name: dev
      url: ${{ steps.get-url.outputs.api_url }}
    
    steps:
      - name: Download JAR artifact
        uses: actions/download-artifact@v4
        with:
          name: application-jar

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION || 'us-east-1' }}

      - name: Deploy to Lambda
        run: |
          aws lambda update-function-code \
            --function-name ehr-spring-core-dev-app \
            --zip-file fileb://ehr-spring-core-1.0.0.jar

      - name: Wait for function update
        run: |
          aws lambda wait function-updated \
            --function-name ehr-spring-core-dev-app

      - name: Get API Gateway URL
        id: get-url
        run: |
          # Get the API Gateway URL from Lambda environment variables or output
          echo "api_url=https://api-dev.example.com" >> $GITHUB_OUTPUT

      - name: Verify deployment
        run: |
          # Test health endpoint
          sleep 10
          echo "Deployment to dev completed successfully"

  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: build
    if: |
      (github.event_name == 'push' && github.ref == 'refs/heads/main') ||
      (github.event_name == 'workflow_dispatch' && github.event.inputs.environment == 'staging')
    environment:
      name: staging
      url: ${{ steps.get-url.outputs.api_url }}
    
    steps:
      - name: Download JAR artifact
        uses: actions/download-artifact@v4
        with:
          name: application-jar

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION || 'us-east-1' }}

      - name: Deploy to Lambda
        run: |
          aws lambda update-function-code \
            --function-name ehr-spring-core-staging-app \
            --zip-file fileb://ehr-spring-core-1.0.0.jar

      - name: Wait for function update
        run: |
          aws lambda wait function-updated \
            --function-name ehr-spring-core-staging-app

      - name: Get API Gateway URL
        id: get-url
        run: |
          echo "api_url=https://api-staging.example.com" >> $GITHUB_OUTPUT

      - name: Verify deployment
        run: |
          sleep 10
          echo "Deployment to staging completed successfully"

  deploy-prod:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [build, deploy-staging]
    if: github.event_name == 'workflow_dispatch' && github.event.inputs.environment == 'prod'
    environment:
      name: prod
      url: ${{ steps.get-url.outputs.api_url }}
    
    steps:
      - name: Download JAR artifact
        uses: actions/download-artifact@v4
        with:
          name: application-jar

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION || 'us-east-1' }}

      - name: Create new Lambda version
        id: create-version
        run: |
          # Update function code
          aws lambda update-function-code \
            --function-name ehr-spring-core-prod-app \
            --zip-file fileb://ehr-spring-core-1.0.0.jar
          
          # Wait for update to complete
          aws lambda wait function-updated \
            --function-name ehr-spring-core-prod-app
          
          # Publish new version
          VERSION=$(aws lambda publish-version \
            --function-name ehr-spring-core-prod-app \
            --query 'Version' \
            --output text)
          
          echo "version=${VERSION}" >> $GITHUB_OUTPUT
          echo "Deployed version: ${VERSION}"

      - name: Update alias to new version
        run: |
          aws lambda update-alias \
            --function-name ehr-spring-core-prod-app \
            --name prod \
            --function-version ${{ steps.create-version.outputs.version }}

      - name: Get API Gateway URL
        id: get-url
        run: |
          echo "api_url=https://api.example.com" >> $GITHUB_OUTPUT

      - name: Verify deployment
        run: |
          sleep 10
          echo "Deployment to production completed successfully"
          echo "Version: ${{ steps.create-version.outputs.version }}"

      - name: Notify success
        if: success()
        run: |
          echo "✅ Production deployment successful!"
          echo "Version: ${{ steps.create-version.outputs.version }}"

      - name: Rollback on failure
        if: failure()
        run: |
          echo "❌ Deployment failed! Consider rolling back to previous version."
          # Optionally implement automatic rollback logic here
