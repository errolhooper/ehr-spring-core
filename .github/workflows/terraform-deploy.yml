name: Terraform Deploy

on:
  push:
    branches:
      - main
      - develop
    paths:
      - 'terraform/**'
      - '.github/workflows/terraform-deploy.yml'
  pull_request:
    branches:
      - main
      - develop
    paths:
      - 'terraform/**'
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy'
        required: true
        type: choice
        options:
          - dev
          - staging
          - prod
      action:
        description: 'Terraform action'
        required: true
        type: choice
        options:
          - plan
          - apply
          - destroy
        default: plan

env:
  TERRAFORM_VERSION: '1.5.0'
  AWS_REGION: 'us-east-1'

jobs:
  terraform-plan:
    name: Terraform Plan
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request' || github.event.inputs.action == 'plan'
    
    strategy:
      matrix:
        environment: [dev]
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ env.TERRAFORM_VERSION }}

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Create secrets.tfvars
        working-directory: terraform/environments/${{ matrix.environment }}
        run: |
          cat > secrets.tfvars <<EOF
          master_username = "${{ secrets.DB_MASTER_USERNAME }}"
          master_password = "${{ secrets.DB_MASTER_PASSWORD }}"
          api_key         = "${{ secrets.API_KEY }}"
          aws_region      = "${{ env.AWS_REGION }}"
          EOF

      - name: Terraform Init
        working-directory: terraform
        run: |
          terraform init \
            -backend-config=environments/${{ matrix.environment }}/backend.tfvars

      - name: Terraform Validate
        working-directory: terraform
        run: terraform validate

      - name: Terraform Format Check
        working-directory: terraform
        run: terraform fmt -check -recursive

      - name: Terraform Plan
        working-directory: terraform
        run: |
          terraform plan \
            -var-file=environments/${{ matrix.environment }}/terraform.tfvars \
            -var-file=environments/${{ matrix.environment }}/secrets.tfvars \
            -out=${{ matrix.environment }}.tfplan

      - name: Upload plan
        uses: actions/upload-artifact@v4
        with:
          name: terraform-plan-${{ matrix.environment }}
          path: terraform/${{ matrix.environment }}.tfplan
          retention-days: 5

      - name: Comment PR with plan
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const output = `#### Terraform Plan for \`${{ matrix.environment }}\` 📋
            
            <details><summary>Show Plan</summary>
            
            \`\`\`terraform
            Terraform plan completed successfully.
            See the workflow logs for detailed output.
            \`\`\`
            
            </details>
            
            *Pusher: @${{ github.actor }}, Action: \`${{ github.event_name }}\`*`;
            
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: output
            })

  terraform-apply:
    name: Terraform Apply
    runs-on: ubuntu-latest
    if: |
      (github.event_name == 'push' && github.ref == 'refs/heads/main') ||
      (github.event_name == 'workflow_dispatch' && github.event.inputs.action == 'apply')
    needs: [terraform-plan]
    environment:
      name: ${{ github.event.inputs.environment || 'dev' }}
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ env.TERRAFORM_VERSION }}

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Determine environment
        id: determine-env
        run: |
          if [ "${{ github.event_name }}" == "workflow_dispatch" ]; then
            echo "environment=${{ github.event.inputs.environment }}" >> $GITHUB_OUTPUT
          elif [ "${{ github.ref }}" == "refs/heads/main" ]; then
            echo "environment=prod" >> $GITHUB_OUTPUT
          else
            echo "environment=dev" >> $GITHUB_OUTPUT
          fi

      - name: Create secrets.tfvars
        working-directory: terraform/environments/${{ steps.determine-env.outputs.environment }}
        run: |
          cat > secrets.tfvars <<EOF
          master_username = "${{ secrets.DB_MASTER_USERNAME }}"
          master_password = "${{ secrets.DB_MASTER_PASSWORD }}"
          api_key         = "${{ secrets.API_KEY }}"
          aws_region      = "${{ env.AWS_REGION }}"
          EOF

      - name: Terraform Init
        working-directory: terraform
        run: |
          terraform init \
            -backend-config=environments/${{ steps.determine-env.outputs.environment }}/backend.tfvars

      - name: Terraform Apply
        working-directory: terraform
        run: |
          terraform apply \
            -var-file=environments/${{ steps.determine-env.outputs.environment }}/terraform.tfvars \
            -var-file=environments/${{ steps.determine-env.outputs.environment }}/secrets.tfvars \
            -auto-approve

      - name: Terraform Output
        working-directory: terraform
        run: terraform output -json > outputs.json

      - name: Upload outputs
        uses: actions/upload-artifact@v4
        with:
          name: terraform-outputs-${{ steps.determine-env.outputs.environment }}
          path: terraform/outputs.json
          retention-days: 30

      - name: Notify success
        if: success()
        run: |
          echo "✅ Terraform apply completed successfully for ${{ steps.determine-env.outputs.environment }}"

      - name: Notify failure
        if: failure()
        run: |
          echo "❌ Terraform apply failed for ${{ steps.determine-env.outputs.environment }}"

  terraform-destroy:
    name: Terraform Destroy
    runs-on: ubuntu-latest
    if: github.event_name == 'workflow_dispatch' && github.event.inputs.action == 'destroy'
    environment:
      name: ${{ github.event.inputs.environment }}
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ env.TERRAFORM_VERSION }}

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Create secrets.tfvars
        working-directory: terraform/environments/${{ github.event.inputs.environment }}
        run: |
          cat > secrets.tfvars <<EOF
          master_username = "${{ secrets.DB_MASTER_USERNAME }}"
          master_password = "${{ secrets.DB_MASTER_PASSWORD }}"
          api_key         = "${{ secrets.API_KEY }}"
          aws_region      = "${{ env.AWS_REGION }}"
          EOF

      - name: Terraform Init
        working-directory: terraform
        run: |
          terraform init \
            -backend-config=environments/${{ github.event.inputs.environment }}/backend.tfvars

      - name: Terraform Destroy
        working-directory: terraform
        run: |
          terraform destroy \
            -var-file=environments/${{ github.event.inputs.environment }}/terraform.tfvars \
            -var-file=environments/${{ github.event.inputs.environment }}/secrets.tfvars \
            -auto-approve

      - name: Notify destruction
        if: success()
        run: |
          echo "🗑️ Infrastructure destroyed for ${{ github.event.inputs.environment }}"
